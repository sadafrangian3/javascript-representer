{
  "type": "Program",
  "body": [
    {
      "type": "ExportNamedDeclaration",
      "declaration": {
        "type": "VariableDeclaration",
        "declarations": [
          {
            "type": "VariableDeclarator",
            "id": {
              "type": "Identifier",
              "name": "twoFer"
            },
            "init": {
              "type": "ArrowFunctionExpression",
              "generator": false,
              "id": null,
              "params": [
                {
                  "type": "Identifier",
                  "name": "value"
                }
              ],
              "body": {
                "type": "BlockStatement",
                "body": [
                  {
                    "type": "VariableDeclaration",
                    "declarations": [
                      {
                        "type": "VariableDeclarator",
                        "id": {
                          "type": "Identifier",
                          "name": "name"
                        },
                        "init": {
                          "type": "Identifier",
                          "name": "value"
                        }
                      }
                    ],
                    "kind": "let"
                  },
                  {
                    "type": "IfStatement",
                    "test": {
                      "type": "BinaryExpression",
                      "operator": "===",
                      "left": {
                        "type": "Identifier",
                        "name": "name"
                      },
                      "right": {
                        "type": "Literal",
                        "raw": "''",
                        "value": ""
                      }
                    },
                    "consequent": {
                      "type": "BlockStatement",
                      "body": [
                        {
                          "type": "ExpressionStatement",
                          "expression": {
                            "type": "AssignmentExpression",
                            "operator": "=",
                            "left": {
                              "type": "Identifier",
                              "name": "name"
                            },
                            "right": {
                              "type": "Literal",
                              "raw": "'you'",
                              "value": "you"
                            }
                          }
                        }
                      ]
                    },
                    "alternate": null
                  },
                  {
                    "type": "ReturnStatement",
                    "argument": {
                      "type": "TemplateLiteral",
                      "quasis": [
                        {
                          "type": "TemplateElement",
                          "value": {
                            "raw": "One for ",
                            "cooked": "One for "
                          },
                          "tail": false
                        },
                        {
                          "type": "TemplateElement",
                          "value": {
                            "raw": ", one for me.",
                            "cooked": ", one for me."
                          },
                          "tail": true
                        }
                      ],
                      "expressions": [
                        {
                          "type": "Identifier",
                          "name": "name"
                        }
                      ]
                    }
                  }
                ]
              },
              "async": false,
              "expression": false
            }
          }
        ],
        "kind": "const"
      },
      "specifiers": [],
      "source": null
    }
  ],
  "sourceType": "module"
}